rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Existing rules...
    // ... existing code ...

    match /rooms/{roomId} {
      allow create: if request.auth != null
                    && request.resource.data.creatorId == request.auth.uid
                    && request.resource.data.name is string
                    && request.resource.data.admins.size() == 1
                    && request.resource.data.members.size() == 1
                    && request.resource.data.members[0] == request.auth.uid
                    && request.resource.data.admins[0] == request.auth.uid;
      allow read: if resource.data.isPrivate == false
                  || (request.auth != null && resource.data.members.hasAny([request.auth.uid]));
      allow update, delete: if request.auth != null && resource.data.admins.hasAny([request.auth.uid]);

      match /members/{uid} {
        allow read: if resource.data.uid == request.auth.uid
                     || get(/databases/$(database)/documents/rooms/$(roomId)).data.members.hasAny([request.auth.uid]);
        // Join rules: allow create if public room OR provided joinKeyHashProof matches secret
        allow create: if request.auth != null && request.auth.uid == uid && (
          get(/databases/$(database)/documents/rooms/$(roomId)).data.isPrivate == false ||
          (
            let secret = get(/databases/$(database)/documents/rooms_secrets/$(roomId)).data;
            request.resource.data.joinKeyHashProof == secret.joinKeyHash
          )
        );
        // prevent storing the proof permanently
        allow update: if false;
        allow delete: if request.auth != null && (request.auth.uid == uid || get(/databases/$(database)/documents/rooms/$(roomId)).data.admins.hasAny([request.auth.uid]));
      }

      match /messages/{messageId} {
        allow read: if get(/databases/$(database)/documents/rooms/$(roomId)).data.isPrivate == false
                     || (request.auth != null && get(/databases/$(database)/documents/rooms/$(roomId)).data.members.hasAny([request.auth.uid]));
        allow create: if request.auth != null && get(/databases/$(database)/documents/rooms/$(roomId)).data.members.hasAny([request.auth.uid])
                       && request.resource.data.senderId == request.auth.uid;
        allow update, delete: if false;
      }
    }

          match /rooms_secrets/{roomId} {
        allow read: if false;
        allow create: if request.auth != null && request.resource.data.creatorId == request.auth.uid;
        // Allow only the room creator to update the join key
        allow update: if request.auth != null && request.resource.data.creatorId == request.auth.uid && get(/databases/$(database)/documents/rooms/$(roomId)).data.creatorId == request.auth.uid;
        allow delete: if false;
      }
  }
} 